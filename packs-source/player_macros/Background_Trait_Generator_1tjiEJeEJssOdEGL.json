{
  "name": "Background Trait Generator",
  "type": "script",
  "command": "// ----- 1. Sorteio das 5 linhas -----\nconst BACKGROUND_TABLE = Array.from({ length: 40 }, (_, i) => ({\n  flavor: game.i18n.localize(`SDM.BackgroundRow${String(i + 1).padStart(2, '0')}.Flavor`),\n  role1: game.i18n.localize(`SDM.BackgroundRow${String(i + 1).padStart(2, '0')}.Role1`),\n  role2: game.i18n.localize(`SDM.BackgroundRow${String(i + 1).padStart(2, '0')}.Role2`),\n  task: game.i18n.localize(`SDM.BackgroundRow${String(i + 1).padStart(2, '0')}.Task`),\n  spin: game.i18n.localize(`SDM.BackgroundRow${String(i + 1).padStart(2, '0')}.Spin`)\n}));\n\nfunction roll5d40(table) {\n  const results = [];\n  while (results.length < 5) {\n    const r = Math.floor(Math.random() * table.length);\n    if (!results.includes(r)) results.push(r);\n  }\n  return results.map(i => ({ index: i + 1, ...table[i] }));\n}\n\n// ----- 2. Criar HTML do Dialog com inputs editáveis e CSS -----\nfunction buildDialogContent(rows) {\n  let html = `\n    <style>\n      .background-table { width: 100%; border-collapse: collapse; margin-bottom: 10px; }\n      .background-table th, .background-table td { border: 1px solid #444; padding: 4px 6px; text-align: left; }\n      .background-table th { background-color: #222; color: #fff; }\n      .background-table tbody tr:nth-child(odd) { background-color: #2a2a2a; }\n      .background-table tbody tr:nth-child(even) { background-color: #1f1f1f; }\n      .preview-inputs input { width: 100%; margin-bottom: 4px; padding: 4px; background-color: #333; border: 1px solid #555; color: #fff; }\n      .preview-inputs label { font-weight: bold; margin-bottom: 2px; display: block; }\n      #reroll-dice { color: red; cursor:pointer; margin-bottom:5px; display:inline-block; }\n    </style>\n    <div style=\"display:flex; justify-content:flex-end;\">\n      <div style=\"color: red; margin-bottom:5px;\">\n        <span style=\"color: black\"><b>${game.i18n.localize('SDM.BackgroundReroll')}</b></span>\n        <i\n          class=\"fas fa-dice fa-lg\"\n          id=\"reroll-dice\"\n          title=\"${game.i18n.localize('SDM.BackgroundReroll')}\"\n          style=\"cursor: pointer\"\n        ></i>\n      </div>\n    </div>\n    <table class=\"background-table\">\n      <thead>\n        <tr>\n          <th></th>\n          <th>${game.i18n.localize('SDM.BackgroundFlavor')}</th>\n          <th>${game.i18n.localize('SDM.BackgroundRole1')}</th>\n          <th>${game.i18n.localize('SDM.BackgroundRole2')}</th>\n          <th>${game.i18n.localize('SDM.BackgroundTask')}</th>\n          <th>${game.i18n.localize('SDM.BackgroundSpin')}</th>\n        </tr>\n      </thead>\n      <tbody>\n  `;\n\n  rows.forEach((row, i) => {\n    html += `<tr data-row=\"${i}\">\n      <td><input type=\"checkbox\" class=\"row-select\"></td>\n      <td><input type=\"checkbox\" class=\"cell-select\" data-col=\"flavor\"> ${row.flavor}</td>\n      <td><input type=\"checkbox\" class=\"cell-select\" data-col=\"role1\"> ${row.role1}</td>\n      <td><input type=\"checkbox\" class=\"cell-select\" data-col=\"role2\"> ${row.role2}</td>\n      <td><input type=\"checkbox\" class=\"cell-select\" data-col=\"task\"> ${row.task}</td>\n      <td><input type=\"checkbox\" class=\"cell-select\" data-col=\"spin\"> ${row.spin}</td>\n    </tr>`;\n  });\n\n  html += `</tbody></table>\n    <div class=\"preview-inputs\">\n      <label><strong>${game.i18n.localize('SDM.BackgroundEditablePreview')}<strong></label>\n      <input type=\"text\" id=\"preview-flavor\" placeholder=\"${game.i18n.localize('SDM.BackgroundFlavor')}\">\n      <input type=\"text\" id=\"preview-role\" placeholder=\"${game.i18n.localize('SDM.BackgroundRole')}\">\n      <input type=\"text\" id=\"preview-task\" placeholder=\"${game.i18n.localize('SDM.BackgroundTask')}\">\n      <input type=\"text\" id=\"preview-spin\" placeholder=\"${game.i18n.localize('SDM.BackgroundSpin')}\">\n    </div>`;\n  return html;\n}\n\n// ----- 3. Inicializa linhas sorteadas -----\nlet selectedRows = roll5d40(BACKGROUND_TABLE);\n\n// ----- 4. Criar DialogV2 -----\nawait foundry.applications.api.DialogV2.wait({\n  window: { title: game.i18n.localize('SDM.BackgroundGenerator') },\n  content: buildDialogContent(selectedRows),\n  buttons: [\n    {\n      action: 'confirm',\n      label: game.i18n.localize('SDM.BackgroundConfirm'),\n      callback: async (event, button, dialog) => {\n        const html = dialog.element;\n        const selected = { flavor: null, role1: null, role2: null, task: null, spin: null };\n\n        // Seleção das linhas\n        html.querySelectorAll('tr').forEach(tr => {\n          const rowIndex = parseInt(tr.dataset.row);\n          const rowCheckbox = tr.querySelector('.row-select');\n          if (rowCheckbox?.checked && !isNaN(rowIndex)) {\n            const rowData = selectedRows[rowIndex];\n            selected.flavor ??= rowData.flavor;\n            selected.role1 ??= rowData.role1;\n            selected.role2 ??= rowData.role2;\n            selected.task ??= rowData.task;\n            selected.spin ??= rowData.spin;\n          }\n        });\n\n        // Seleção das células\n        html.querySelectorAll('.cell-select:checked').forEach(cb => {\n          const tr = cb.closest('tr');\n          if (!tr) return;\n          const rowIndex = parseInt(tr.dataset.row);\n          if (isNaN(rowIndex)) return;\n          selected[cb.dataset.col] = selectedRows[rowIndex][cb.dataset.col];\n        });\n\n        // Pega valores do preview ou usa os selecionados\n        const flavor = html.querySelector('#preview-flavor').value || selected.flavor;\n        const role =\n          html.querySelector('#preview-role').value || `${selected.role1} ${selected.role2}`;\n        const task = html.querySelector('#preview-task').value || selected.task;\n        const spin = html.querySelector('#preview-spin').value || selected.spin;\n\n        const actor = game.user?.character || canvas?.tokens?.controlled[0]?.actor;\n\n        if (!actor) {\n          ui.notifications.error(game.i18n.localize('SDM.BackgroundInvalidCharacter'));\n        }\n\n        if (!flavor || !role || !task || !spin) {\n          return;\n        }\n\n\n        await game.sdm.api.createBackgroundTrait(actor, { flavor, role, task, spin });\n\n        ui.notifications.info(game.i18n.format(\"SDM.BackgroundTraitCreated\", {\n          flavor,\n          role,\n          name: actor.name,\n        }));\n      }\n    },\n    { action: 'cancel', label: game.i18n.localize('SDM.BackgroundCancel') }\n  ],\n  render: (event, dialog) => {\n    const html = dialog.element;\n\n    function updatePreview() {\n      const selected = { flavor: null, role1: null, role2: null, task: null, spin: null };\n      html.querySelectorAll('tr').forEach(tr => {\n        const rowIndex = parseInt(tr.dataset.row);\n        const rowCheckbox = tr.querySelector('.row-select');\n        if (rowCheckbox?.checked && !isNaN(rowIndex)) {\n          const rowData = selectedRows[rowIndex];\n          selected.flavor ??= rowData.flavor;\n          selected.role1 ??= rowData.role1;\n          selected.role2 ??= rowData.role2;\n          selected.task ??= rowData.task;\n          selected.spin ??= rowData.spin;\n        }\n      });\n      html.querySelectorAll('.cell-select:checked').forEach(cb => {\n        const tr = cb.closest('tr');\n        if (!tr) return;\n        const rowIndex = parseInt(tr.dataset.row);\n        if (isNaN(rowIndex)) return;\n        selected[cb.dataset.col] = selectedRows[rowIndex][cb.dataset.col];\n      });\n\n      html.querySelector('#preview-flavor').value = selected.flavor ?? '';\n      html.querySelector('#preview-role').value =\n        selected.role1 && selected.role2 ? `${selected.role1} ${selected.role2}` : '';\n      html.querySelector('#preview-task').value = selected.task ?? '';\n      html.querySelector('#preview-spin').value = selected.spin ?? '';\n    }\n\n    function attachListeners() {\n      // Linhas\n      html.querySelectorAll('.row-select').forEach(cb => {\n        cb.addEventListener('change', () => {\n          const row = cb.closest('tr');\n          if (!row) return;\n          if (cb.checked) {\n            html.querySelectorAll('.row-select').forEach(other => {\n              if (other !== cb) other.checked = false;\n            });\n            html.querySelectorAll('.cell-select').forEach(c => (c.checked = false));\n            row.querySelectorAll('.cell-select').forEach(c => (c.checked = true));\n          } else {\n            row.querySelectorAll('.cell-select').forEach(c => (c.checked = false));\n          }\n          updatePreview();\n        });\n      });\n\n      // Células\n      html.querySelectorAll('.cell-select').forEach(cb => {\n        cb.addEventListener('change', () => {\n          const tr = cb.closest('tr');\n          if (!tr) return;\n          const rowCheckbox = tr.querySelector('.row-select');\n          if (cb.checked) {\n            html.querySelectorAll(`.cell-select[data-col=\"${cb.dataset.col}\"]`).forEach(c => {\n              if (c !== cb) c.checked = false;\n            });\n            if (rowCheckbox) rowCheckbox.checked = false;\n          }\n          updatePreview();\n        });\n      });\n    }\n\n    // Reroll\n    const reroll = html.querySelector('#reroll-dice');\n    reroll?.addEventListener('click', async () => {\n      if (!window.confirm(game.i18n.localize('SDM.BackgroundRerollConfirmation'))) return;\n      selectedRows = roll5d40(BACKGROUND_TABLE);\n      const tbody = html.querySelector('tbody');\n      if (tbody) {\n        tbody.innerHTML = buildDialogContent(selectedRows).match(/<tbody>([\\s\\S]*)<\\/tbody>/)[1];\n      }\n      attachListeners();\n      updatePreview();\n    });\n\n    attachListeners();\n    updatePreview();\n  }\n});",
  "img": "icons/sundries/documents/document-sealed-red-tan.webp",
  "author": "0fqTkfNvjooZ2og7",
  "scope": "global",
  "folder": null,
  "ownership": {
    "default": 0,
    "0fqTkfNvjooZ2og7": 3
  },
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.348",
    "systemId": "sdm",
    "systemVersion": "0.1.33",
    "createdTime": 1756482650636,
    "modifiedTime": 1756483272736,
    "lastModifiedBy": "0fqTkfNvjooZ2og7"
  },
  "_id": "1tjiEJeEJssOdEGL",
  "sort": 0,
  "_key": "!macros!1tjiEJeEJssOdEGL"
}
