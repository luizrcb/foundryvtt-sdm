{
  "name": "give heroic dice",
  "type": "script",
  "author": "ubbQuuuaFUXKToRg",
  "img": "icons/magic/control/modfiy-luck-fortune-brown.webp",
  "scope": "global",
  "command": "const { DialogV2 } = foundry.applications.api;\n\nif (!game.user.isGM) return;\n\n// Get all character actors\nconst characters = game.actors.filter(e => e.type === \"character\");\n\n// Create character select options\nconst characterOptions = [\n  `<option value=\"all\">${game.i18n.localize(\"SDM.AllCharacters\")}</option>`,\n  ...characters.map(c => `<option value=\"${c.id}\">${c.name}</option>`)\n].join('');\n\nconst content = `\n  <form class=\"hero-dice-adjustment\">\n    <div class=\"form-group\">\n      <label>${game.i18n.localize(\"SDM.SelectCharacter\")}</label>\n      <select name=\"character\" class=\"form-control\">\n        ${characterOptions}\n      </select>\n    </div>\n  </form>\n`;\n\n// Show dialog with properly configured buttons\nconst data = await DialogV2.wait({\n  window: {\n    title: game.i18n.localize(\"SDM.ManageHeroDice\"),\n    resizable: false\n  },\n  rejectClose: false,\n  modal: true,\n  content,\n  buttons: [\n    {\n      action: \"increment\",\n      label: `1 ${game.i18n.localize('SDM.HeroDie')}`,\n      icon: \"fa-solid fa-plus\",\n      type: \"button\",\n      callback: (event, button, dialog) => ({\n        character: button.form.querySelector('[name=\"character\"]').value,\n        adjustment: 1\n      })\n    },\n    {\n      action: \"decrement\",\n      label: `1 ${game.i18n.localize('SDM.HeroDie')}`,\n      icon: \"fa-solid fa-minus\",\n      type: \"button\",\n      callback: (event, button, dialog) => ({\n        character: button.form.querySelector('[name=\"character\"]').value,\n        adjustment: -1\n      })\n    }\n  ],\n\n});\n\nif (!data?.character) return;\n\n// Process targets with error handling\nconst targets = data.character === \"all\"\n  ? characters\n  : [game.actors.get(data.character)].filter(Boolean);\n\nif (!targets.length) {\n  ui.notifications.error(game.i18n.format('SDM.ErrorNoActorSelected', { type: 'character' }));\n  return;\n}\n\n// Prepare updates with validation\nconst updates = targets.map(actor => {\n  try {\n    const current = Math.max(0, actor.system.hero_dice?.value || 0);\n    const maxLevel = Math.max(1, actor.system.hero_dice?.max || 1);\n    const newValue = Math.clamp(current + data.adjustment, 0, maxLevel);\n    return newValue !== current ? {\n      _id: actor.id,\n      \"system.hero_dice.value\": newValue,\n    } : null;\n  } catch (e) {\n    console.error(game.i18n.format('SDM.ErrorUpdateDoc', { doc: actor.name }), e);\n    return null;\n  }\n}).filter(Boolean);\n\n// Apply changes\nif (updates.length > 0) {\n  await Actor.updateDocuments(updates);\n  ui.notifications.info(game.i18n.format('SDM.UpdatedHeroDice', { number: updates.length }));\n} else {\n  ui.notifications.warn(game.i18n.localize('SDM.MessageNoChanges'));\n}",
  "folder": null,
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.348",
    "systemId": "sdm",
    "systemVersion": "0.1.20",
    "createdTime": 1750710497200,
    "modifiedTime": 1756551178840,
    "lastModifiedBy": "0fqTkfNvjooZ2og7"
  },
  "ownership": {
    "default": 0,
    "ubbQuuuaFUXKToRg": 0
  },
  "_id": "Z5QYmPYhkd4aMfJ4",
  "sort": 500000,
  "_key": "!macros!Z5QYmPYhkd4aMfJ4"
}
