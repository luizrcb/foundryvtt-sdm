{
  "folder": null,
  "name": "Group Initiative",
  "type": "script",
  "author": "ubbQuuuaFUXKToRg",
  "img": "icons/svg/dice-target.svg",
  "scope": "global",
  "command": "const tokens = canvas.tokens.controlled;\n\nconst excluded = [];\nconst groups = {\n  group1: [], // Players + Warrior + Helpers + Friendly NPC Tokens\n  group2: [],  // Neutral NPCs\n  group3: [],  // Hostile NPCs\n  group4: [], // secret NPCs\n};\n\n// Separate tokens into groups\nfor (const token of tokens) {\n  const actor = token.actor;\n  if (actor.type === 'character') {\n    groups.group1.push(token);\n  } else if (actor.type === 'npc') {\n    const isFriendlyToken = token.document.disposition === CONST.TOKEN_DISPOSITIONS.FRIENDLY;\n    const isNeutralToken = token.document.disposition === CONST.TOKEN_DISPOSITIONS.NEUTRAL;\n    const isHostileToken = token.document.disposition === CONST.TOKEN_DISPOSITIONS.HOSTILE;\n    const isSecretToken = token.document.disposition === CONST.TOKEN_DISPOSITIONS.SECRET;\n    const isWarrior = actor.system?.type === 'warrior' || false;\n    const isHelper = actor.system?.type === 'helper' || false;\n    const isPorter = actor.system?.type === 'porter' || false;\n\n    if (isWarrior || isHelper || isFriendlyToken) {\n      groups.group1.push(token);\n    } else if (isSecretToken) {\n      groups.group4.push(token);\n    } else if (isHostileToken) {\n      groups.group3.push(token);\n    } else if (isNeutralToken && !isPorter) {\n      groups.group2.push(token);\n    } else {\n      excluded.push(token);\n    }\n  }\n}\n\n// Notify about excluded tokens\nif (excluded.length > 0) {\n  const names = excluded.map(t => t.name).join(', ');\n  ui.notifications.info(game.i18n.format('SDM.CombatantsExcluded', { names }));\n}\n\n// Process a token group\nasync function processGroup(group) {\n  if (group.length === 0) return;\n\n  // Select random roller\n  const roller = group[Math.floor(Math.random() * group.length)];\n\n  // Ensure roller is in combat\n  if (!roller.combatant) {\n    await roller.document.toggleCombatant();\n  }\n\n  // Roll initiative for roller\n  await game.combat.rollAll({ messageOptions: { rollMode: CONST.DICE_ROLL_MODES.PUBLIC } });\n\n  const initVal = roller.combatant.initiative;\n\n  // Apply initiative to group\n  for (const token of group) {\n    if (token === roller) continue;\n\n    if (!token.combatant) {\n      await token.document.toggleCombatant();\n    }\n\n    await token.combatant.update({ initiative: initVal });\n  }\n}\n\nfor (let group of Object.values(groups)) {\n  if (group.length) {\n    await processGroup(group);\n  }\n}",
  "flags": {},
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.348",
    "systemId": "sdm",
    "systemVersion": "0.1.20",
    "createdTime": 1752715637637,
    "modifiedTime": 1756551178840,
    "lastModifiedBy": "0fqTkfNvjooZ2og7"
  },
  "ownership": {
    "default": 0,
    "ubbQuuuaFUXKToRg": 0
  },
  "_id": "b7e4p0wfeGsK4tFx",
  "sort": 300000,
  "_key": "!macros!b7e4p0wfeGsK4tFx"
}
