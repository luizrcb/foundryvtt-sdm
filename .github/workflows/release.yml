# Adapted from draw-steel
name: Release Creation

env:
  NODE_VERSION: 22

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Load system manifest
      id: manifest
      uses: ActionsTools/read-json-action@main
      with:
        file_path: "./system.json"

    # Extract version embedded in the tag.
    # This step expects the tag to be one of the following formats:
    #   - "v<major>.<minor>.<patch>" (e.g., "v1.2.3")
    #   - "<major>.<minor>.<patch>"  (e.g., "1.2.3")
    #
    # The version will be used by later steps to fill in the value for the
    # "version" key required for a valid module manifest.
    - name: Extract Version From Tag
      id: get_version
      uses: Simply007/get-version-action@v2


    # Set up our some variables for future use
    # Adapted from https://github.community/t/how-to-get-just-the-tag-name/16241/7
    # Tag name: ${{ env.TAG_NAME }}
    # Zip name: ${{ env.ZIP_NAME }}
    # Expected Release Download URL: ${{ env.RELEASE_DOWNLOAD_URL }}
    # Expected Release system.json URL: ${{ env.RELEASE_INSTALL_URL }}
    - name: Set up variables
      id: get_vars
      run: |
        TAG=${GITHUB_REF/refs\/tags\//}
        PACKAGE_ID=${{ steps.manifest.outputs.id }}
        VERSION=${{steps.get_version.outputs.version-without-v}}
        PACKAGE_TYPE="system"
        echo "TAG_NAME=$TAG" >> $GITHUB_ENV
        echo "PACKAGE_ID=$PACKAGE_ID" >> $GITHUB_ENV
        echo "PACKAGE_TYPE=$PACKAGE_TYPE" >> $GITHUB_ENV
        echo "ZIP_NAME=$PACKAGE_ID-$VERSION.zip" >> $GITHUB_ENV
        echo "RELEASE_DOWNLOAD_URL=https://github.com/${{ github.repository }}/releases/download/$TAG/$PACKAGE_ID-$VERSION.zip" >> $GITHUB_ENV
        echo "RELEASE_INSTALL_URL=https://github.com/${{ github.repository }}/releases/download/$TAG/$PACKAGE_TYPE.json" >> $GITHUB_ENV


    # Run some tests to make sure our `system.json` is correct
    # Exit before setting up node if not
    - name: Verify correct naming
      env:
        TAG_NAME: ${{ env.TAG_NAME }}
        RELEASE_DOWNLOAD: ${{ env.RELEASE_DOWNLOAD_URL }}
        PACKAGE_TYPE: ${{ env.PACKAGE_TYPE }}
        PACKAGE_VERSION: ${{ steps.manifest.outputs.version }}
        PACKAGE_DOWNLOAD: ${{ steps.manifest.outputs.download }}
      run: |
        # Validate that the tag being released matches the package version.
        if [[ ! $TAG_NAME == v$PACKAGE_VERSION ]]; then
          echo "The $PACKAGE_TYPE.json version does not match tag name."
          echo "$PACKAGE_TYPE.json: $PACKAGE_VERSION"
          echo "tag name: $TAG_NAME"
          echo "Please fix this and push the tag again."
          exit 1
        fi

        # Validate that the package download url matches the release asset that will be created.
        if [[ ! $RELEASE_DOWNLOAD == $PACKAGE_DOWNLOAD ]]; then
          echo "The $PACKAGE_TYPE.json download url does not match the created release asset url."
          echo "$PACKAGE_TYPE.json: $PACKAGE_DOWNLOAD"
          echo "release asset url: $RELEASE_DOWNLOAD"
          echo "Please fix this and push the tag again."
          exit 1
        fi


    - name: Adjust manifest
      uses: TomaszKandula/variable-substitution@v1.0.2
      with:
        files: "system.json"
      env:
        flags.hotReload: false

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'


    # `npm ci` is recommended:
    # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs
    - name: Install Dependencies
      run: npm ci

    # Run build script, leaving out CSS because that's handled by the postInstall script
    - name: Build All
      run: |
        npm run prepareRelease

    - name: Determine archive contents
      id: archive
      uses: actions/github-script@v6
      env:
        ESMODULES: ${{ steps.manifest.outputs.esmodules }}
        LANGUAGES: ${{ steps.manifest.outputs.languages }}
        PACKS: ${{ steps.manifest.outputs.packs }}
        STYLES: ${{ steps.manifest.outputs.styles }}
      with:
        result-encoding: string
        script: |
          const manifest = {
            includes: [
              "assets/",
              "css/",
              "fonts/",
              "lang/",
              "module/",
              "packs/",
              "templates/",
              "CHANGELOG.md",
              "LICENSE",
              "README.md",
              "system.json",
              "SDM-3RD-PARTY-LICENSE-2.0.txt"
            ]
          };

          if (process.env.ESMODULES) manifest.esmodules = JSON.parse(process.env.ESMODULES);
          if (process.env.LANGUAGES) manifest.languages = JSON.parse(process.env.LANGUAGES);
          if (process.env.PACKS) manifest.packs = JSON.parse(process.env.PACKS);
          if (process.env.STYLES) manifest.styles = JSON.parse(process.env.STYLES);

          let includes = [
            "${{ env.PACKAGE_TYPE }}.json",
            ...(manifest.esmodules ?? []),
            ...(manifest.esmodules?.map(s => `${s}.map`) ?? []),
            ...(manifest.styles?.map(s => s.src) ?? []),
            ...(manifest.languages?.map(l => l.path) ?? []),
            ...(manifest.includes ?? [])
          ];

          return includes.join(" ");


    - name: Zip package
      run: zip ${{ env.ZIP_NAME }} -r  ${{ steps.archive.outputs.result }} -x packs/_source/* packs/_source/

    - name: Fetch Release Body
      id: release
      uses: cardinalby/git-get-release-action@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag: ${{ env.TAG_NAME }}
        doNotFailIfNotFound: true


    - name: Update Release with Files
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # Set this to false if you want to prevent updating existing releases
        name: ${{ env.TAG_NAME }}
        draft: false
        prerelease: true
        omitDraftDuringUpdate: true
        omitPrereleaseDuringUpdate: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './${{ env.PACKAGE_TYPE }}.json, ./${{ env.ZIP_NAME }}'
        tag: ${{ env.TAG_NAME }}
        body: |
          ${{ steps.release.outputs.body }}

          **Installation:** To manually install this release, please use the following manifest URL: ${{ env.RELEASE_INSTALL_URL }}

    # Publish update to Foundry Admin interface via API
    - name: Publish Module to FoundryVTT Website
      id: publish-to-foundry-website
      uses: cs96and/FoundryVTT-release-package@v1
      with:
        package-token: ${{ secrets.PACKAGE_TOKEN }}
        manifest-url: ${{ env.RELEASE_INSTALL_URL }}
        notes-url: https://github.com/${{github.repository}}/releases/tag/${{env.TAG_NAME}}
